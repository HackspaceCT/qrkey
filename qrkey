#!/usr/bin/env python

import argparse
import os
import sys

from time import sleep

import zbar

DEFAULT_TIMEOUT = os.environ.get('QRKEY_TIMEOUT', None) or 2  # seconds
DEFAULT_VIDEO_DEVICE = os.environ.get('QRKEY_VIDEO', None) or '/dev/video0'

description = 'qrkey scanner.'
parser = argparse.ArgumentParser(description=description)
parser.add_argument('-d', '--debug', action='store_true', default=False,
                    help='enable debug')
parser.add_argument('-t', '--timeout', action='store', type=int,
                    help='set timeout (seconds)')
parser.add_argument('-v', '--video', action='store', type=str,
                    help='set video device')


class Scanner(object):

    def __init__(self, device, debug=False, timeout=1):
        self._processor = zbar.Processor()
        self._processor.parse_config('enable')
        self._processor.visible = debug

        try:
            self._processor.init(device)
        except zbar.SystemError as e:
            sys.exit(e.message)

        self.timeout = timeout

    def scan(self):

        try:
            self._processor.process_one(timeout=self.timeout)
        except zbar.WindowClosed:
            sys.exit(0)

        for symbol in self._processor.results:
            if not symbol.count:
                return symbol.type, symbol.data

        return None, None

if __name__ == '__main__':

    args = parser.parse_args()

    scanner = Scanner(args.video or DEFAULT_VIDEO_DEVICE,
                      debug=args.debug,
                      timeout=args.timeout or DEFAULT_TIMEOUT)

    while True:

        try:
            _, value = scanner.scan()

            if value:
                print value

            sleep(0.5)
        except KeyboardInterrupt:
            sys.exit(0)
