#!/usr/bin/env python
# coding: utf-8

# QR code reader with plugin architecture for Python2.
# Copyright (C) 2015  qrkey authors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import imp
import os
import sys

import cv2
import numpy
import zbar


DEFAULT_TIMEOUT = os.environ.get('QRKEY_TIMEOUT', None) or 2  # seconds
DEFAULT_ZBAR_VIDEO_DEVICE = os.environ.get('QRKEY_VIDEO',
                                           None) or '/dev/video0'
DEFAULT_OPENCV_VIDEO_DEVICE = os.environ.get('QRKEY_VIDEO',
                                             None) or 0

description = 'qrkey scanner.'
parser = argparse.ArgumentParser(description=description)
parser.add_argument('-d', '--debug', action='store_true', default=False,
                    help='enable debug')
parser.add_argument('-t', '--timeout', action='store', type=int,
                    help='set timeout (seconds)')
parser.add_argument('-v', '--video', action='store', type=str,
                    help='set video device')
parser.add_argument('--opencv', action='store_true', default=False,
                    help='use OpenCV to sample video')
parser.add_argument('-p', '--plugin', action='store', type=str,
                    help='path to the source file containing custom action')


class BaseScanner(object):

    def scan(self):
        raise NotImplementedError


class ZbarScanner(BaseScanner):

    def __init__(self, device, debug=False, timeout=1):
        self._processor = zbar.Processor()
        self._processor.parse_config('enable')

        try:
            self._processor.init(device)
        except zbar.SystemError as e:
            sys.exit(e.message)
        self._processor.visible = debug

        self.timeout = timeout

    def scan(self):

        self._processor.process_one(timeout=self.timeout)

        for symbol in self._processor.results:
            if not symbol.count:
                return symbol.type, symbol.data

        return None, None


class OpenCVScanner(BaseScanner):

    def __init__(self, device, debug=False, timeout=1):
        self.debug = debug
        self.device = device
        self.window = cv2.cv.NamedWindow('Debug', cv2.cv.CV_WINDOW_NORMAL)
        self.capture = cv2.cv.CreateCameraCapture(self.device)
        self._scanner = zbar.ImageScanner()
        self._scanner.parse_config('enable')

    def _process(self):
        self.frame = cv2.cv.QueryFrame(self.capture)
        self.aframe = numpy.asarray(self.frame[:, :])
        g = cv2.cv.fromarray(self.aframe)
        g = numpy.asarray(g)

        imgray = cv2.cvtColor(g, cv2.COLOR_BGR2GRAY)
        raw = str(imgray.data)
        self.results = zbar.Image(self.frame.width,
                                  self.frame.height,
                                  'Y800',
                                  raw)
        self._scanner.scan(self.results)

    def scan(self):

        self._process()

        for symbol in self.results:
            if not symbol.count:
                return symbol.type, symbol.data

        if self.debug:
            cv2.imshow('Debug', self.aframe)
            cv2.cv.WaitKey(5)

        return None, None

if __name__ == '__main__':

    args = parser.parse_args()

    if args.opencv:
        Scanner = OpenCVScanner
        video_device = args.video or DEFAULT_OPENCV_VIDEO_DEVICE
    else:
        Scanner = ZbarScanner
        video_device = args.video or DEFAULT_ZBAR_VIDEO_DEVICE

    if args.plugin:
        action = imp.load_source('actions', args.plugin)

    scanner = Scanner(video_device,
                      debug=args.debug,
                      timeout=args.timeout or DEFAULT_TIMEOUT)

    while True:

        try:
            _, value = scanner.scan()

            if value:
                if args.plugin:
                    action.do(value)
                else:
                    print value
                    sys.exit(0)

        except KeyboardInterrupt:
            sys.exit(0)
        except zbar.WindowClosed:
            sys.exit(0)
